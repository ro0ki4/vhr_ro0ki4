<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="packageMapper.base.adjustsalaryBaseMapper">


    <insert id="insertadjustsalary"  useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `adjustsalary`
        (
        <trim suffixOverrides=",">
                    <if test="id!=null">
                        `id`,
                    </if>
                    <if test="eid!=null">
                        `eid`,
                    </if>
                    <if test="asDate!=null">
                        `asDate`,
                    </if>
                    <if test="beforeSalary!=null">
                        `beforeSalary`,
                    </if>
                    <if test="afterSalary!=null">
                        `afterSalary`,
                    </if>
                    <if test="reason!=null">
                        `reason`,
                    </if>
                    <if test="remark!=null">
                        `remark`,
                    </if>
        </trim>
        )
        VALUES
        (
        <trim suffixOverrides=",">
                <if test="id!=null">
                    #{id},
                </if>
                <if test="eid!=null">
                    #{eid},
                </if>
                <if test="asDate!=null">
                    #{asDate},
                </if>
                <if test="beforeSalary!=null">
                    #{beforeSalary},
                </if>
                <if test="afterSalary!=null">
                    #{afterSalary},
                </if>
                <if test="reason!=null">
                    #{reason},
                </if>
                <if test="remark!=null">
                    #{remark},
                </if>
        </trim>
        )
    </insert>




    <update id="updateadjustsalary">
        UPDATE `adjustsalary`
        SET
        <trim suffixOverrides=",">
            <if test="eid != null">
                `eid` = #{eid},
            </if>
            <if test="asDate != null">
                `asDate` = #{asDate},
            </if>
            <if test="beforeSalary != null">
                `beforeSalary` = #{beforeSalary},
            </if>
            <if test="afterSalary != null">
                `afterSalary` = #{afterSalary},
            </if>
            <if test="reason != null and reason!=''">
                `reason` = #{reason},
            </if>
            <if test="remark != null and remark!=''">
                `remark` = #{remark},
            </if>
        </trim>
        WHERE
        <trim suffixOverrides="and">
                `id` = #{id} and
        </trim>
    </update>

    <update id="update">
        UPDATE `adjustsalary`
        SET
        <trim suffixOverrides=",">
        <if test="set.eid != null">
            `eid` = #{set.eid},
        </if>
        <if test="set.asDate != null">
            `asDate` = #{set.asDate},
        </if>
        <if test="set.beforeSalary != null">
            `beforeSalary` = #{set.beforeSalary},
        </if>
        <if test="set.afterSalary != null">
            `afterSalary` = #{set.afterSalary},
        </if>
        <if test="set.reason != null and set.reason!=''">
            `reason` = #{set.reason},
        </if>
        <if test="set.remark != null and set.remark!=''">
            `remark` = #{set.remark},
        </if>
        </trim>
        <trim prefix="where" suffixOverrides="and | or">
                <if test="where.idList != null">
                    `id` in
                    <foreach collection="where.idList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test="where.idSt !=null">
                `id` >= #{where.idSt} and
            </if>
            <if test="where.idEd!=null">
                `id` &lt;= #{where.idEd} and
            </if>
                <if test="where.eidList != null">
                    `eid` in
                    <foreach collection="where.eidList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test="where.eidSt !=null">
                `eid` >= #{where.eidSt} and
            </if>
            <if test="where.eidEd!=null">
                `eid` &lt;= #{where.eidEd} and
            </if>
                <if test="where.asDateList != null">
                    `asDate` in
                    <foreach collection="where.asDateList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test="where.asDateSt !=null">
                `asDate` >= #{where.asDateSt} and
            </if>
            <if test="where.asDateEd!=null">
                `asDate` &lt;= #{where.asDateEd} and
            </if>
                <if test="where.beforeSalaryList != null">
                    `beforeSalary` in
                    <foreach collection="where.beforeSalaryList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test="where.beforeSalarySt !=null">
                `beforeSalary` >= #{where.beforeSalarySt} and
            </if>
            <if test="where.beforeSalaryEd!=null">
                `beforeSalary` &lt;= #{where.beforeSalaryEd} and
            </if>
                <if test="where.afterSalaryList != null">
                    `afterSalary` in
                    <foreach collection="where.afterSalaryList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test="where.afterSalarySt !=null">
                `afterSalary` >= #{where.afterSalarySt} and
            </if>
            <if test="where.afterSalaryEd!=null">
                `afterSalary` &lt;= #{where.afterSalaryEd} and
            </if>
                <if test="where.reasonList != null">
                    `reason` in
                    <foreach collection="where.reasonList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test ="where.fuzzyReason!=null and where.fuzzyReason.size()>0">
                (
                <foreach collection="where.fuzzyReason"  separator="or" item="item">
                    `Reason` like concat('%',#{item},'%')
                </foreach>
                ) and
            </if>
            <if test ="where.rightFuzzyReason!=null and where.rightFuzzyReason.size()>0">
                (
                <foreach collection="where.rightFuzzyReason"  separator="or" item="item">
                    `Reason` like concat(#{item},'%')
                </foreach>
                ) and
            </if>
                <if test="where.remarkList != null">
                    `remark` in
                    <foreach collection="where.remarkList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test ="where.fuzzyRemark!=null and where.fuzzyRemark.size()>0">
                (
                <foreach collection="where.fuzzyRemark"  separator="or" item="item">
                    `Remark` like concat('%',#{item},'%')
                </foreach>
                ) and
            </if>
            <if test ="where.rightFuzzyRemark!=null and where.rightFuzzyRemark.size()>0">
                (
                <foreach collection="where.rightFuzzyRemark"  separator="or" item="item">
                    `Remark` like concat(#{item},'%')
                </foreach>
                ) and
            </if>
        </trim>
    </update>


    <resultMap type="packageModel.adjustsalary" id="adjustsalaryMap">
        <result property="id" column="id"/>
        <result property="eid" column="eid"/>
        <result property="asDate" column="asDate"/>
        <result property="beforeSalary" column="beforeSalary"/>
        <result property="afterSalary" column="afterSalary"/>
        <result property="reason" column="reason"/>
        <result property="remark" column="remark"/>
    </resultMap>


    <select id="queryadjustsalary" resultMap="adjustsalaryMap">
        select
        <include refid="baseResult"></include>
        from  `adjustsalary`
        <trim prefix="where" suffixOverrides="and | or">
            <if test="id != null">
                `id` = #{id} and
            </if>
            <if test="eid != null">
                `eid` = #{eid} and
            </if>
            <if test="asDate != null">
                `asDate` = #{asDate} and
            </if>
            <if test="beforeSalary != null">
                `beforeSalary` = #{beforeSalary} and
            </if>
            <if test="afterSalary != null">
                `afterSalary` = #{afterSalary} and
            </if>
            <if test="reason != null and reason!=''">
                `reason` = #{reason} and
            </if>
            <if test="remark != null and remark!=''">
                `remark` = #{remark} and
            </if>
            <if test = "(_parameter instanceof packageModel.adjustsalary$QueryBuilder) == true">
                <if test="idList != null">
                    `id` in
                    <foreach collection="idList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
                <if test="idSt !=null">
                    `id` >= #{idSt} and
                </if>
                <if test="idEd!=null">
                    `id` &lt;= #{idEd} and
                </if>
                <if test="eidList != null">
                    `eid` in
                    <foreach collection="eidList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
                <if test="eidSt !=null">
                    `eid` >= #{eidSt} and
                </if>
                <if test="eidEd!=null">
                    `eid` &lt;= #{eidEd} and
                </if>
                <if test="asDateList != null">
                    `asDate` in
                    <foreach collection="asDateList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
                <if test="asDateSt !=null">
                    `asDate` >= #{asDateSt} and
                </if>
                <if test="asDateEd!=null">
                    `asDate` &lt;= #{asDateEd} and
                </if>
                <if test="beforeSalaryList != null">
                    `beforeSalary` in
                    <foreach collection="beforeSalaryList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
                <if test="beforeSalarySt !=null">
                    `beforeSalary` >= #{beforeSalarySt} and
                </if>
                <if test="beforeSalaryEd!=null">
                    `beforeSalary` &lt;= #{beforeSalaryEd} and
                </if>
                <if test="afterSalaryList != null">
                    `afterSalary` in
                    <foreach collection="afterSalaryList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
                <if test="afterSalarySt !=null">
                    `afterSalary` >= #{afterSalarySt} and
                </if>
                <if test="afterSalaryEd!=null">
                    `afterSalary` &lt;= #{afterSalaryEd} and
                </if>
                <if test="reasonList != null">
                    `reason` in
                    <foreach collection="reasonList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
                <if test ="fuzzyReason!=null and fuzzyReason.size()>0">
                    (
                    <foreach collection="fuzzyReason"  separator="or" item="item">
                        `Reason` like concat('%',#{item},'%')
                    </foreach>
                    ) and
                </if>
                <if test ="rightFuzzyReason!=null and rightFuzzyReason.size()>0">
                    (
                    <foreach collection="rightFuzzyReason"  separator="or" item="item">
                        `Reason` like concat(#{item},'%')
                    </foreach>
                    ) and
                </if>
                <if test="remarkList != null">
                    `remark` in
                    <foreach collection="remarkList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
                <if test ="fuzzyRemark!=null and fuzzyRemark.size()>0">
                    (
                    <foreach collection="fuzzyRemark"  separator="or" item="item">
                        `Remark` like concat('%',#{item},'%')
                    </foreach>
                    ) and
                </if>
                <if test ="rightFuzzyRemark!=null and rightFuzzyRemark.size()>0">
                    (
                    <foreach collection="rightFuzzyRemark"  separator="or" item="item">
                        `Remark` like concat(#{item},'%')
                    </foreach>
                    ) and
                </if>
            </if>
        </trim>
    </select>

    <select id="queryadjustsalaryLimit1" resultMap="adjustsalaryMap">
        select
        <include refid="baseResult"></include>
        from  `adjustsalary`
        <trim prefix="where" suffixOverrides="and | or">
            <if test="id != null">
                `id` = #{id} and
            </if>
            <if test="eid != null">
                `eid` = #{eid} and
            </if>
            <if test="asDate != null">
                `asDate` = #{asDate} and
            </if>
            <if test="beforeSalary != null">
                `beforeSalary` = #{beforeSalary} and
            </if>
            <if test="afterSalary != null">
                `afterSalary` = #{afterSalary} and
            </if>
            <if test="reason != null and reason!=''">
                `reason` = #{reason} and
            </if>
            <if test="remark != null and remark!=''">
                `remark` = #{remark} and
            </if>
            <if test = "(_parameter instanceof packageModel.adjustsalary$QueryBuilder) == true">
                    <if test="idList != null">
                        `id` in
                        <foreach collection="idList" close=")" open="(" separator="," item="item">
                            #{item}
                        </foreach> and
                    </if>
                <if test="idSt !=null">
                    `id` >= #{idSt} and
                </if>
                <if test="idEd!=null">
                    `id` &lt;= #{idEd} and
                </if>
                    <if test="eidList != null">
                        `eid` in
                        <foreach collection="eidList" close=")" open="(" separator="," item="item">
                            #{item}
                        </foreach> and
                    </if>
                <if test="eidSt !=null">
                    `eid` >= #{eidSt} and
                </if>
                <if test="eidEd!=null">
                    `eid` &lt;= #{eidEd} and
                </if>
                    <if test="asDateList != null">
                        `asDate` in
                        <foreach collection="asDateList" close=")" open="(" separator="," item="item">
                            #{item}
                        </foreach> and
                    </if>
                <if test="asDateSt !=null">
                    `asDate` >= #{asDateSt} and
                </if>
                <if test="asDateEd!=null">
                    `asDate` &lt;= #{asDateEd} and
                </if>
                    <if test="beforeSalaryList != null">
                        `beforeSalary` in
                        <foreach collection="beforeSalaryList" close=")" open="(" separator="," item="item">
                            #{item}
                        </foreach> and
                    </if>
                <if test="beforeSalarySt !=null">
                    `beforeSalary` >= #{beforeSalarySt} and
                </if>
                <if test="beforeSalaryEd!=null">
                    `beforeSalary` &lt;= #{beforeSalaryEd} and
                </if>
                    <if test="afterSalaryList != null">
                        `afterSalary` in
                        <foreach collection="afterSalaryList" close=")" open="(" separator="," item="item">
                            #{item}
                        </foreach> and
                    </if>
                <if test="afterSalarySt !=null">
                    `afterSalary` >= #{afterSalarySt} and
                </if>
                <if test="afterSalaryEd!=null">
                    `afterSalary` &lt;= #{afterSalaryEd} and
                </if>
                    <if test="reasonList != null">
                        `reason` in
                        <foreach collection="reasonList" close=")" open="(" separator="," item="item">
                            #{item}
                        </foreach> and
                    </if>
                <if test ="fuzzyReason!=null and fuzzyReason.size()>0">
                    (
                    <foreach collection="fuzzyReason"  separator="or" item="item">
                        `Reason` like concat('%',#{item},'%')
                    </foreach>
                    ) and
                </if>
                <if test ="rightFuzzyReason!=null and rightFuzzyReason.size()>0">
                    (
                    <foreach collection="rightFuzzyReason"  separator="or" item="item">
                        `Reason` like concat(#{item},'%')
                    </foreach>
                    ) and
                </if>
                    <if test="remarkList != null">
                        `remark` in
                        <foreach collection="remarkList" close=")" open="(" separator="," item="item">
                            #{item}
                        </foreach> and
                    </if>
                <if test ="fuzzyRemark!=null and fuzzyRemark.size()>0">
                    (
                    <foreach collection="fuzzyRemark"  separator="or" item="item">
                        `Remark` like concat('%',#{item},'%')
                    </foreach>
                    ) and
                </if>
                <if test ="rightFuzzyRemark!=null and rightFuzzyRemark.size()>0">
                    (
                    <foreach collection="rightFuzzyRemark"  separator="or" item="item">
                        `Remark` like concat(#{item},'%')
                    </foreach>
                    ) and
                </if>
            </if>
        </trim>
        limit 1
    </select>

    <sql id="allResult">
        <trim suffixOverrides=",">
        `id`,
        `eid`,
        `asDate`,
        `beforeSalary`,
        `afterSalary`,
        `reason`,
        `remark`,
        </trim>
    </sql>



    <sql id="baseResult">
        <trim suffixOverrides=",">
            <if test = "(_parameter instanceof packageModel.adjustsalary$QueryBuilder) == true">

                <if test="fetchFields==null">
                    <include refid="allResult"></include>
                </if>
                <if test="fetchFields!=null">
                    <if test="fetchFields.AllFields !=null">
                        <include refid="allResult"></include>
                    </if>
                    <if test="fetchFields.AllFields ==null and fetchFields.fetchFields==null and fetchFields.excludeFields==null and fetchFields.otherFields==null">
                        <include refid="allResult"></include>
                    </if>
                    <if test="fetchFields.AllFields==null and fetchFields.fetchFields!=null">
                    <if test="fetchFields.fetchFields.id==true">
                        `id`,
                    </if>
                    <if test="fetchFields.fetchFields.eid==true">
                        `eid`,
                    </if>
                    <if test="fetchFields.fetchFields.asDate==true">
                        `asDate`,
                    </if>
                    <if test="fetchFields.fetchFields.beforeSalary==true">
                        `beforeSalary`,
                    </if>
                    <if test="fetchFields.fetchFields.afterSalary==true">
                        `afterSalary`,
                    </if>
                    <if test="fetchFields.fetchFields.reason==true">
                        `reason`,
                    </if>
                    <if test="fetchFields.fetchFields.remark==true">
                        `remark`,
                    </if>
                    </if>
                    <if test="fetchFields.AllFields==null and fetchFields.excludeFields!=null">
                    <if test="fetchFields.excludeFields.id==null">
                        `id`,
                    </if>
                    <if test="fetchFields.excludeFields.eid==null">
                        `eid`,
                    </if>
                    <if test="fetchFields.excludeFields.asDate==null">
                        `asDate`,
                    </if>
                    <if test="fetchFields.excludeFields.beforeSalary==null">
                        `beforeSalary`,
                    </if>
                    <if test="fetchFields.excludeFields.afterSalary==null">
                        `afterSalary`,
                    </if>
                    <if test="fetchFields.excludeFields.reason==null">
                        `reason`,
                    </if>
                    <if test="fetchFields.excludeFields.remark==null">
                        `remark`,
                    </if>
                    </if>
                    <if test="fetchFields.otherFields!=null and fetchFields.otherFields.size>0">
                        <foreach collection="fetchFields.otherFields" index="index" item="item" separator=",">
                        `#{item}`
                        </foreach>
                    </if>
                </if>
            </if>
            <if test="(_parameter instanceof packageModel.adjustsalary$QueryBuilder) == false" >
                <include refid="allResult"></include>
            </if>

        </trim>
    </sql>


</mapper>